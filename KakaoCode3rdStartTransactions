 public int solution(String[] lines) {
            ArrayList<double[]> dlist = new ArrayList<double[]>();

        for (int i = 0; i < lines.length; i++) {
            double a = Double.parseDouble(lines[i].substring(17, 23));
            a += Integer.parseInt(lines[i].substring(14, 16)) * 60;
            a += Integer.parseInt(lines[i].substring(11, 13)) * 3600;
            double b = Double.parseDouble(lines[i].substring(24, lines[i].length() - 1));
            dlist.add(new double[] { a, b });

        }

        int countAns = 0;
        int countCompStart = 0;
        int countCompEnd = 0;
        double aEnd = 0;
        double aStart = 0;

        double bEnd = 0;
        double bStart = 0;
        //N번째 점검 노드의 시작점과 종료점 기준으로 -1초 이내에 포함된 수 계산.
        //종료점이 어떤 노드의 범위안에 있다. 혹은 종료점-1초 지점이 어떠한 노드 안에 있다.
        for (int i = 0; i < dlist.size(); i++) {
            countCompStart = 0;
            countCompEnd = 0;
            aEnd = dlist.get(i)[0];
            aStart = aEnd - dlist.get(i)[1] + 0.001;

            for (int j = 0; j < dlist.size(); j++) {
                bEnd = dlist.get(j)[0];
                bStart = bEnd - dlist.get(j)[1] + 0.001;

                if( (aEnd <=bEnd && aEnd>=bStart) ||(aEnd-1<=bEnd && aEnd-1>=bStart)){
                    countCompStart++;

                }
                if( (aStart <=bEnd && aStart>=bStart) ||(aStart-1<=bEnd && aStart-1>=bStart)){
                    countCompEnd++;

                }
/*
                if (aEnd >= bEnd && (aEnd - 1) <= bEnd) {
                    countComp++;
                } else if (aEnd <= (bStart) && aEnd >= (bStart - 1)) {
                    countComp++;
                } else if (aStart >= bEnd && (aStart - 1) <= bEnd) {
                    countComp++;
                } else if ((aStart) <= (bStart) && aEnd >= (bStart)) {
                    countComp++;
                }
*/
            }
            if (countAns < countCompStart) {
                countAns = countCompStart;
            }
            if (countAns < countCompEnd) {
                countAns = countCompEnd;
            }

        }

        return countAns;
}
